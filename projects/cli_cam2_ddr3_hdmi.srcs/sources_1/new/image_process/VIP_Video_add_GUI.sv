module VIP_Video_add_GUI
#(
	parameter	[9:0]	IMG_HDISP = 10'd640,//640*480
	parameter	[9:0]	IMG_VDISP = 10'd480
)
(
	//global clock
	input				clk,  				 
	input				rst_n,				 
                                             
	//Image data prepred to be processd      
	input				per_frame_vsync ,	 
	input				per_frame_href  ,	 
	input				per_frame_clken ,	 
	input		[7:0]	per_img_red		,		 
	input		[7:0]	per_img_green	,		 
	input		[7:0]	per_img_blue	,		 
                                             
    input   [7:0]	    char_index [7:0],				//匹配的字符索引
    input  			    match_valid		, 				//匹配成功标志   
    
	//Image data has been processd           
	output reg			post_frame_vsync,	 
	output reg			post_frame_href ,	 
	output reg			post_frame_clken,	 
	output wire	[7:0]	post_img_red	,		 
	output wire	[7:0]	post_img_green	,		 
	output wire	[7:0]	post_img_blue	  	
);

//------------------------------------------
localparam BLACK  = 16'b00000_000000_00000;     //RGB565 黑色
localparam WHITE  = 16'b11111_111111_11111;     //RGB565 白色

localparam BACK_GROUND = 16'b11111_000000_00000;     //背景色，此处用红色代替，实际上不显示

//字符位置
localparam CHINA_POS_X  = 11'd50;   //汉字区域起始点横坐标
localparam CHAR_POS_X   = 11'd70;   //字符区域起始点横坐标
localparam CHAR_POS_Y   = 11'd100;  //数字区域起始点纵坐标

localparam CHAR_WIDTH   = 11'd16;   //字符区域宽度
localparam CHAR_HEIGHT  = 11'd32;   //字符区域高度


//------------------------------------------
reg [9:0]  	x_cnt;
reg [9:0]   y_cnt;

//对输入的像素进行 行/场 方向计数，得到其纵横坐标。
always@(posedge clk or negedge rst_n)
begin
	if(!rst_n)
		begin
			x_cnt <= 10'd0;
			y_cnt <= 10'd0;
		end
	else
		if(!per_frame_vsync)begin
			x_cnt <= 10'd0;
			y_cnt <= 10'd0;
		end
		else if(per_frame_clken) begin
			if(x_cnt < IMG_HDISP - 1) begin
				x_cnt <= x_cnt + 1'b1;
				y_cnt <= y_cnt;
			end
			else begin
				x_cnt <= 10'd0;
				y_cnt <= y_cnt + 1'b1;
			end
		end
end

//------------------------------------------
reg  [23:0]  gui_data;

reg  [511:0] char_num [33:0] ;  //字模
reg  [511:0] chinese  [10:0] ;  

//绘制车牌字符
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)  begin
         gui_data   <= BLACK ;
    end
    //////////////////////////////////////////////////////////////////////////////////

	else 
		if((x_cnt >= CHINA_POS_X)                       && (x_cnt < CHINA_POS_X + CHAR_WIDTH*1)        //第一个汉字
			 && (y_cnt >= CHAR_POS_Y)                   && (y_cnt < CHAR_POS_Y + CHAR_HEIGHT)) begin
			if(chinese [char_index [0]] [ (CHAR_HEIGHT+CHAR_POS_Y - y_cnt)*CHAR_WIDTH - ((x_cnt-CHINA_POS_X)%CHAR_WIDTH) -1 ] )
				gui_data <= WHITE;         
			else
				gui_data <= BLACK;         
		end    
		else	
	
		if((x_cnt >= CHAR_POS_X)                        && (x_cnt < CHAR_POS_X + CHAR_WIDTH*1)        //第一个英文
			 && (y_cnt >= CHAR_POS_Y)                   && (y_cnt < CHAR_POS_Y + CHAR_HEIGHT)) begin
			if(char_num [char_index [1]] [ (CHAR_HEIGHT+CHAR_POS_Y - y_cnt)*CHAR_WIDTH - ((x_cnt-CHAR_POS_X)%CHAR_WIDTH) -1 ] )
				gui_data <= WHITE;         
			else
				gui_data <= BLACK;         
		end    
		else if((x_cnt >= CHAR_POS_X + CHAR_WIDTH*1)   && (x_cnt < CHAR_POS_X + CHAR_WIDTH*2) //空格
			 && (y_cnt >= CHAR_POS_Y)                  && (y_cnt < CHAR_POS_Y + CHAR_HEIGHT)) begin
				gui_data <= BLACK;          //显示字符区域背景为白色
		end
		else if((x_cnt >= CHAR_POS_X + CHAR_WIDTH*2) && (x_cnt < CHAR_POS_X + CHAR_WIDTH*3)     //X 十位
			 && (y_cnt >= CHAR_POS_Y)                  && (y_cnt < CHAR_POS_Y + CHAR_HEIGHT)) begin
			if(char_num [char_index [3]] [ (CHAR_HEIGHT+CHAR_POS_Y - y_cnt)*CHAR_WIDTH - ((x_cnt-CHAR_POS_X)%CHAR_WIDTH) -1 ]  )
				gui_data <= WHITE;
			else
				gui_data <= BLACK;
		end
		else if((x_cnt >= CHAR_POS_X + CHAR_WIDTH*3) && (x_cnt < CHAR_POS_X + CHAR_WIDTH*4)//X 个位
			 && (y_cnt >= CHAR_POS_Y)                  && (y_cnt < CHAR_POS_Y + CHAR_HEIGHT)) begin
			if(char_num [char_index [4]] [ (CHAR_HEIGHT+CHAR_POS_Y - y_cnt)*CHAR_WIDTH - ((x_cnt-CHAR_POS_X)%CHAR_WIDTH) -1 ]  )
				gui_data <= WHITE;
			else
				gui_data <= BLACK;
		end
		else if((x_cnt >= CHAR_POS_X + CHAR_WIDTH*4)   && (x_cnt < CHAR_POS_X + CHAR_WIDTH*5)//逗号
			 && (y_cnt >= CHAR_POS_Y)                  && (y_cnt < CHAR_POS_Y + CHAR_HEIGHT)) begin
			if(char_num [char_index [5]] [ (CHAR_HEIGHT+CHAR_POS_Y - y_cnt)*CHAR_WIDTH - ((x_cnt-CHAR_POS_X)%CHAR_WIDTH) -1 ] )
				gui_data <= WHITE;         
			else
				gui_data <= BLACK;         
		end    
		else if((x_cnt >= CHAR_POS_X + CHAR_WIDTH*5)   && (x_cnt < CHAR_POS_X + CHAR_WIDTH*6)//Y 百位
			 && (y_cnt >= CHAR_POS_Y)                  && (y_cnt < CHAR_POS_Y + CHAR_HEIGHT)) begin
			if(char_num [char_index [6]] [ (CHAR_HEIGHT+CHAR_POS_Y - y_cnt)*CHAR_WIDTH - ((x_cnt-CHAR_POS_X)%CHAR_WIDTH) -1 ] )
				gui_data <= WHITE;         //显示字符为黑色
			else
				gui_data <= BLACK;          //显示字符区域背景为白色
		end
		else if((x_cnt >= CHAR_POS_X + CHAR_WIDTH*6)   && (x_cnt < CHAR_POS_X + CHAR_WIDTH*7)//Y 十位
			 && (y_cnt >= CHAR_POS_Y)                  && (y_cnt < CHAR_POS_Y + CHAR_HEIGHT)) begin
			if(char_num [char_index [7]] [ (CHAR_HEIGHT+CHAR_POS_Y - y_cnt)*CHAR_WIDTH - ((x_cnt-CHAR_POS_X)%CHAR_WIDTH) -1 ]  )
				gui_data <= WHITE;
			else
				gui_data <= BLACK;
		end
        else 
            gui_data <= BACK_GROUND;
end

//------------------------------------------
reg	[7:0]	per_img_red_r	 ;		 
reg	[7:0]	per_img_green_r	 ;		 
reg	[7:0]	per_img_blue_r	 ;	

always@(posedge clk or negedge rst_n)
begin
	if(!rst_n)
		begin	
		per_img_red_r	 	<= 0;
		per_img_green_r	 	<= 0;
		per_img_blue_r	 	<= 0;
		
		post_frame_vsync 	<= 0;
		post_frame_href 	<= 0;
		post_frame_clken 	<= 0;		
		end
	else begin
		post_frame_vsync 	<= 	per_frame_vsync		;
		post_frame_href 	<= 	per_frame_href		;
		post_frame_clken 	<= 	per_frame_clken		;
		
		per_img_red_r	 	<=  per_img_red		;
		per_img_green_r	 	<=  per_img_green	;
		per_img_blue_r	 	<=  per_img_blue	;
		end
end

assign	post_img_red	=	(gui_data == BACK_GROUND) ? per_img_red_r	 : gui_data[23:16];			
assign	post_img_green	=	(gui_data == BACK_GROUND) ? per_img_green_r	 : gui_data[15: 8];		
assign	post_img_blue	=	(gui_data == BACK_GROUND) ? per_img_blue_r	 : gui_data[ 7: 0];


///////////////////////////////////////////////////////////////////////////////////////
//                                  字库
///////////////////////////////////////////////////////////////////////////////////////

 //A至Z  0至9，除去英文O和英文I，共计34个字符（不包含汉字）16p x 32p
  
always @(posedge clk) begin 
    char_num[0 ] <= 512'h000000000000000000000000038003800380038004C004C004C004C00C4008600860086018201FF0103010301030201820182018601CF83E0000000000000000;/*"A",10*/
    char_num[1 ] <= 512'h0000000000000000000000007FE018381818180C180C180C180C180C181818301FE01818180C180418061806180618061806180C18187FF00000000000000000;/*"B",11*/
    char_num[2 ] <= 512'h00000000000000000000000003E0061C080C180630023002300060006000600060006000600060006000600030023002100418080C1003E00000000000000000;/*"C",12*/
    char_num[3 ] <= 512'h0000000000000000000000007FC0187018181808180C180C1806180618061806180618061806180618061804180C180C1818181818607FC00000000000000000;/*"D",13*/
    char_num[4 ] <= 512'h0000000000000000000000007FFC180C180418021802180018001810181018301FF0183018101810180018001800180218021804180C7FFC0000000000000000;/*"E",14*/
    char_num[5 ] <= 512'h0000000000000000000000007FFC181C180418021802180018001810181018301FF018301810181018101800180018001800180018007E000000000000000000;/*"F",15*/
    char_num[6 ] <= 512'h00000000000000000000000003C00C300810181830083008200060006000600060006000607E60186018201830183018101818180C2007C00000000000000000;/*"G",16*/
    char_num[7 ] <= 512'h000000000000000000000000FC3F300C300C300C300C300C300C300C300C300C3FFC300C300C300C300C300C300C300C300C300C300CFC3F0000000000000000;/*"H",17*/
    char_num[8 ] <= 512'h00000000000000000000000007FE006000600060006000600060006000600060006000600060006000600060006000600060006000600060706070C071803F00;/*"J",18*/
    char_num[9 ] <= 512'h0000000000000000000000007E7C183018201860184018801880190019001B001D801D8018C018C018601860183018301830181818187E3E0000000000000000;/*"K",19*/
    char_num[10] <= 512'h0000000000000000000000007E001800180018001800180018001800180018001800180018001800180018001800180218021804180C7FFC0000000000000000;/*"L",20*/
    char_num[11] <= 512'h000000000000000000000000F00F381C381C381C381C382C2C2C2C2C2C2C2C4C2C4C264C264C264C268C228C238C238C230C230C210CF13F0000000000000000;/*"M",21*/
    char_num[12] <= 512'h000000000000000000000000F01F380438042C042C0426042604230423042184218420C420C42064206420342034201C201C200C200CF8040000000000000000;/*"N",22*/
    char_num[13] <= 512'h0000000000000000000000007FF01818180C180618061806180618061806180C18181FE01800180018001800180018001800180018007E000000000000000000;/*"P",23*/
    char_num[14] <= 512'h00000000000000000000000003C00C3018181008300C300C6006600660066006600660066006600660066006278438CC386C18780C7003E00032003C001C0000;/*"Q",24*/
    char_num[15] <= 512'h0000000000000000000000007FE018381818180C180C180C180C180C181818301FE018C018C0186018601860183018301830181818187E1E0000000000000000;/*"R",25*/
    char_num[16] <= 512'h0000000000000000000000000FC818783018601860086008600070003C001F0007C001F000780018001C400C400C600C200C3018383027E00000000000000000;/*"S",26*/
    char_num[17] <= 512'h0000000000000000000000003FFC3184218641824182018001800180018001800180018001800180018001800180018001800180018007E00000000000000000;/*"T",27*/
    char_num[18] <= 512'h000000000000000000000000FC3E30083008300830083008300830083008300830083008300830083008300830083008300818101C2007C00000000000000000;/*"U",28*/
    char_num[19] <= 512'h0000000000000000000000007C1E180C1808180818080C100C100C100C100C200620062006200640034003400340038001800180010001000000000000000000;/*"V",29*/
    char_num[20] <= 512'h000000000000000000000000F3CF618661842184208430C431C431C431C831C811C812481A681A681A701C700C700C700C300C20082008200000000000000000;/*"W",30*/
    char_num[21] <= 512'h0000000000000000000000007C3E180818100C100C20062006400340038001800180018001C002C0026004600470083008301818101C7C3E0000000000000000;/*"X",31*/
    char_num[22] <= 512'h0000000000000000000000007E3E3808180818100C100C100C200620062003400340038001800180018001800180018001800180018007E00000000000000000;/*"Y",32*/
    char_num[23] <= 512'h0000000000000000000000001FFE1C0C180C3018201800300060006000C000C00180018003000300060006000C00180218063004301C7FFC0000000000000000;/*"Z",33*/
    char_num[24] <= 512'h00000000000000000000000003C006200C30181818181808300C300C300C300C300C300C300C300C300C300C1808181818180C30062003C00000000000000000;/*"0",0*/
    char_num[25] <= 512'h000000000000000000000000008001801F800180018001800180018001800180018001800180018001800180018001800180018003C01FF80000000000000000;/*"1",1*/
    char_num[26] <= 512'h00000000000000000000000007E008381018200C200C300C300C000C001800180030006000C0018003000200040408041004200C3FF83FF80000000000000000;/*"2",2*/
    char_num[27] <= 512'h00000000000000000000000007C018603030301830183018001800180030006003C0007000180008000C000C300C300C30083018183007C00000000000000000;/*"3",3*/
    char_num[28] <= 512'h0000000000000000000000000060006000E000E0016001600260046004600860086010603060206040607FFC0060006000600060006003FC0000000000000000;/*"4",4*/
    char_num[29] <= 512'h0000000000000000000000000FFC0FFC10001000100010001000100013E0143018181008000C000C000C000C300C300C20182018183007C00000000000000000;/*"5",5*/
    char_num[30] <= 512'h00000000000000000000000001E006180C180818180010001000300033E0363038183808300C300C300C300C300C180C18080C180E3003E00000000000000000;/*"6",6*/
    char_num[31] <= 512'h0000000000000000000000001FFC1FFC100830102010202000200040004000400080008001000100010001000300030003000300030003000000000000000000;/*"7",7*/
    char_num[32] <= 512'h00000000000000000000000007E00C301818300C300C300C380C38081E180F2007C018F030783038601C600C600C600C600C3018183007C00000000000000000;/*"8",8*/
    char_num[33] <= 512'h00000000000000000000000007C01820301030186008600C600C600C600C600C701C302C186C0F8C000C0018001800103030306030C00F800000000000000000;/*"9",9*/
end

always @(posedge clk) begin 
    chinese[0 ]  <= 512'h00000000010001000080008400867FFE0000000000000FF80810081008100810081008100FF008900080008004A00C9008881888108C20842704430401000000;/*"京0*/
    chinese[1 ]  <= 512'h0000000040004A807BBE4AA44AA44AA44AA43BA84A28402801283F282028002800A47FE40824102411241F241124013C022C0220022012200E20042000000000;/*"鄂1*/
    chinese[2 ]  <= 512'h000000000000104010201020102011FC65045E044604460845F84400440044007C0447FE4490449044904490449044907C924512411201120212041E08000000;/*"皖2*/
    chinese[3 ]  <= 512'h0000000000402020102010200820030005FE050445044504250429042904090409FC090409001100110011007100310012001200120034003400140008000000;/*"沪3*/
    chinese[4 ]  <= 512'h0000000004400620044004447FFE44400440044005000500010001103FF0011001100210021812142214221622126412042004200820092010E0204040000000;/*"苏4*/
    chinese[5 ]  <= 512'h000000000420042404243FFE0420042004403FFC2006200460340FF8000400043FFC03080708051809A032C046A005A01960225004500C88128E218401800000;/*"蒙5*/
    chinese[6 ]  <= 512'h000000000200030022003226123C1A240A240AA40FA44A24523C3224332412A412A416A41624263C26242A246A242A2422242224223C22242224222402000000;/*"湘6*/
    chinese[7 ]  <= 512'h00000000000022003204125E12200A400AC00FC00A404A407242323E32C81348124816481E482A4822482248624822482248228822882E882308210800080000;/*"浙7*/
    chinese[8 ]  <= 512'h000000000600040004600BC0084010801FF8310851081FF81108110811081EF8100000067FFE001008100FF0081008100FF00810081008100FF0081000000000;/*"鲁8*/
    chinese[9 ]  <= 512'h000000000200020002081FF8114815A8134813681BA817F8138813681528152819081FF8100000047FFE040004000FF8000800080010001000D0007000200000;/*"粤9*/
    chinese[10]  <= 512'h000000000040004004807CF804900910292411FC1324112411247FFC15441444104410AC11281270106810A811281278105810941114722634E0006000000000;/*"豫10*/
end

endmodule 
